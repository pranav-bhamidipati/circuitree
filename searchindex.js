Search.setIndex({"alltitles": {"1. Choose a Grammar": [[1, "1.-Choose-a-Grammar"]], "1. Database installation": [[21, "1.-Database-installation"]], "2. Define a reward function": [[1, "2.-Define-a-reward-function"]], "2. Making a celery app with the reward function": [[21, "2.-Making-a-celery-app-with-the-reward-function"]], "3. Calling the reward function as a celery task": [[21, "3.-Calling-the-reward-function-as-a-celery-task"]], "3. Create a subclass": [[1, "3.-Create-a-subclass"]], "4. Launching a worker node": [[21, "4.-Launching-a-worker-node"]], "5. Running a parallel search": [[21, "5.-Running-a-parallel-search"]], "API Reference": [[3, "api-reference"]], "Animating the search": [[1, "Animating-the-search"]], "Built-in Grammars": [[3, "built-in-grammars"], [4, "built-in-grammars"]], "CircuiTree": [[3, "circuitree"]], "CircuiTree: Biochemical circuit design using RL": [[2, "circuitree-biochemical-circuit-design-using-rl"]], "Creating a CircuiTree class": [[1, "Creating-a-CircuiTree-class"]], "Defining custom Grammars using CircuitGrammar": [[5, "Defining-custom-Grammars-using-CircuitGrammar"]], "Defining search spaces": [[6, "defining-search-spaces"]], "Dependencies": [[0, "dependencies"]], "Distributed search in the cloud": [[21, "Distributed-search-in-the-cloud"]], "Getting started": [[2, null]], "Getting started tutorial": [[1, "Getting-started-tutorial"]], "Installation": [[0, "id1"]], "Low-level CircuitGrammar API": [[3, "low-level-circuitgrammar-api"]], "Overall sampling of the search graph": [[1, "Overall-sampling-of-the-search-graph"]], "Parallel MCTS": [[21, "Parallel-MCTS"]], "Parallel search on a single machine": [[21, "Parallel-search-on-a-single-machine"]], "Problem statement": [[1, "Problem-statement"]], "Running a tree search": [[1, "Running-a-tree-search"]], "The best individual topologies": [[1, "The-best-individual-topologies"]], "User guide": [[2, null]], "Utility functions and classes": [[3, "utility-functions-and-classes"]], "Visualisation": [[3, "visualisation"]], "Visualizing results": [[1, "Visualizing-results"]], "circuitree.circuitree.CircuiTree": [[7, "circuitree-circuitree-circuitree"]], "circuitree.circuitree.ucb_score": [[8, "circuitree-circuitree-ucb-score"]], "circuitree.grammar.CircuitGrammar": [[9, "circuitree-grammar-circuitgrammar"]], "circuitree.models.DimerNetworkTree": [[10, "circuitree-models-dimernetworktree"]], "circuitree.models.DimersGrammar": [[11, "circuitree-models-dimersgrammar"]], "circuitree.models.SimpleNetworkGrammar": [[12, "circuitree-models-simplenetworkgrammar"]], "circuitree.models.SimpleNetworkTree": [[13, "circuitree-models-simplenetworktree"]], "circuitree.utils.AtomicCounter": [[14, "circuitree-utils-atomiccounter"]], "circuitree.utils.ManagedEvent": [[15, "circuitree-utils-managedevent"]], "circuitree.utils.merge_overlapping_sets": [[16, "circuitree-utils-merge-overlapping-sets"]], "circuitree.viz.complexity_layout": [[17, "circuitree-viz-complexity-layout"]], "circuitree.viz.plot_complexity": [[18, "circuitree-viz-plot-complexity"]], "circuitree.viz.plot_network": [[19, "circuitree-viz-plot-network"]], "circuitree.viz.rgb2hex": [[20, "circuitree-viz-rgb2hex"]]}, "docnames": ["getting_started/installation", "getting_started/tutorial_1_getting_started", "index", "user_guide/api", "user_guide/defining_search_spaces/built_in_grammars", "user_guide/defining_search_spaces/custom_grammars", "user_guide/defining_search_spaces/index", "user_guide/generated/circuitree/circuitree.circuitree.CircuiTree", "user_guide/generated/circuitree/circuitree.circuitree.ucb_score", "user_guide/generated/grammar/circuitree.grammar.CircuitGrammar", "user_guide/generated/models/circuitree.models.DimerNetworkTree", "user_guide/generated/models/circuitree.models.DimersGrammar", "user_guide/generated/models/circuitree.models.SimpleNetworkGrammar", "user_guide/generated/models/circuitree.models.SimpleNetworkTree", "user_guide/generated/utils/circuitree.utils.AtomicCounter", "user_guide/generated/utils/circuitree.utils.ManagedEvent", "user_guide/generated/utils/circuitree.utils.merge_overlapping_sets", "user_guide/generated/viz/circuitree.viz.complexity_layout", "user_guide/generated/viz/circuitree.viz.plot_complexity", "user_guide/generated/viz/circuitree.viz.plot_network", "user_guide/generated/viz/circuitree.viz.rgb2hex", "user_guide/tutorial_2_mcts_in_parallel"], "envversion": {"nbsphinx": 4, "sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "filenames": ["getting_started/installation.rst", "getting_started/tutorial_1_getting_started.ipynb", "index.rst", "user_guide/api.rst", "user_guide/defining_search_spaces/built_in_grammars.rst", "user_guide/defining_search_spaces/custom_grammars.ipynb", "user_guide/defining_search_spaces/index.rst", "user_guide/generated/circuitree/circuitree.circuitree.CircuiTree.rst", "user_guide/generated/circuitree/circuitree.circuitree.ucb_score.rst", "user_guide/generated/grammar/circuitree.grammar.CircuitGrammar.rst", "user_guide/generated/models/circuitree.models.DimerNetworkTree.rst", "user_guide/generated/models/circuitree.models.DimersGrammar.rst", "user_guide/generated/models/circuitree.models.SimpleNetworkGrammar.rst", "user_guide/generated/models/circuitree.models.SimpleNetworkTree.rst", "user_guide/generated/utils/circuitree.utils.AtomicCounter.rst", "user_guide/generated/utils/circuitree.utils.ManagedEvent.rst", "user_guide/generated/utils/circuitree.utils.merge_overlapping_sets.rst", "user_guide/generated/viz/circuitree.viz.complexity_layout.rst", "user_guide/generated/viz/circuitree.viz.plot_complexity.rst", "user_guide/generated/viz/circuitree.viz.plot_network.rst", "user_guide/generated/viz/circuitree.viz.rgb2hex.rst", "user_guide/tutorial_2_mcts_in_parallel.ipynb"], "indexentries": {"__init__() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.__init__", false]], "__init__() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.__init__", false]], "__init__() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.__init__", false]], "__init__() (circuitree.models.dimersgrammar method)": [[11, "circuitree.models.DimersGrammar.__init__", false]], "__init__() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.__init__", false]], "__init__() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.__init__", false]], "__init__() (circuitree.utils.atomiccounter method)": [[14, "circuitree.utils.AtomicCounter.__init__", false]], "__init__() (circuitree.utils.managedevent method)": [[15, "circuitree.utils.ManagedEvent.__init__", false]], "atomiccounter (class in circuitree.utils)": [[14, "circuitree.utils.AtomicCounter", false]], "backpropagate_reward() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.backpropagate_reward", false]], "backpropagate_reward() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.backpropagate_reward", false]], "backpropagate_reward() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.backpropagate_reward", false]], "backpropagate_visit() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.backpropagate_visit", false]], "backpropagate_visit() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.backpropagate_visit", false]], "backpropagate_visit() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.backpropagate_visit", false]], "bfs_iterator() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.bfs_iterator", false]], "bfs_iterator() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.bfs_iterator", false]], "bfs_iterator() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.bfs_iterator", false]], "circuitgrammar (class in circuitree.grammar)": [[9, "circuitree.grammar.CircuitGrammar", false]], "circuitree (class in circuitree.circuitree)": [[7, "circuitree.circuitree.CircuiTree", false]], "clear() (circuitree.utils.managedevent method)": [[15, "circuitree.utils.ManagedEvent.clear", false]], "complexity_layout() (in module circuitree.viz)": [[17, "circuitree.viz.complexity_layout", false]], "component_codes (circuitree.models.simplenetworkgrammar property)": [[12, "circuitree.models.SimpleNetworkGrammar.component_codes", false]], "copy_graph() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.copy_graph", false]], "copy_graph() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.copy_graph", false]], "copy_graph() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.copy_graph", false]], "default_attrs (circuitree.circuitree.circuitree property)": [[7, "circuitree.circuitree.CircuiTree.default_attrs", false]], "default_attrs (circuitree.models.dimernetworktree property)": [[10, "circuitree.models.DimerNetworkTree.default_attrs", false]], "default_attrs (circuitree.models.simplenetworktree property)": [[13, "circuitree.models.SimpleNetworkTree.default_attrs", false]], "dimer_options (circuitree.models.dimersgrammar property)": [[11, "circuitree.models.DimersGrammar.dimer_options", false]], "dimernetworktree (class in circuitree.models)": [[10, "circuitree.models.DimerNetworkTree", false]], "dimersgrammar (class in circuitree.models)": [[11, "circuitree.models.DimersGrammar", false]], "do_action() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.do_action", false]], "do_action() (circuitree.models.dimersgrammar method)": [[11, "circuitree.models.DimersGrammar.do_action", false]], "do_action() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.do_action", false]], "edge_options (circuitree.models.dimersgrammar property)": [[11, "circuitree.models.DimersGrammar.edge_options", false]], "enumerate_terminal_states() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.enumerate_terminal_states", false]], "enumerate_terminal_states() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.enumerate_terminal_states", false]], "enumerate_terminal_states() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.enumerate_terminal_states", false]], "expand_edge() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.expand_edge", false]], "expand_edge() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.expand_edge", false]], "expand_edge() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.expand_edge", false]], "from_file() (circuitree.circuitree.circuitree class method)": [[7, "circuitree.circuitree.CircuiTree.from_file", false]], "from_file() (circuitree.models.dimernetworktree class method)": [[10, "circuitree.models.DimerNetworkTree.from_file", false]], "from_file() (circuitree.models.simplenetworktree class method)": [[13, "circuitree.models.SimpleNetworkTree.from_file", false]], "generate_gml() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.generate_gml", false]], "generate_gml() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.generate_gml", false]], "generate_gml() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.generate_gml", false]], "get_actions() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.get_actions", false]], "get_actions() (circuitree.models.dimersgrammar method)": [[11, "circuitree.models.DimersGrammar.get_actions", false]], "get_actions() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.get_actions", false]], "get_attributes() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.get_attributes", false]], "get_attributes() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.get_attributes", false]], "get_attributes() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.get_attributes", false]], "get_component_recolorings() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.get_component_recolorings", false]], "get_genotype_parts() (circuitree.models.dimersgrammar static method)": [[11, "circuitree.models.DimersGrammar.get_genotype_parts", false]], "get_random_terminal_descendant() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.get_random_terminal_descendant", false]], "get_random_terminal_descendant() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.get_random_terminal_descendant", false]], "get_random_terminal_descendant() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.get_random_terminal_descendant", false]], "get_recolorings() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.get_recolorings", false]], "get_reward() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.get_reward", false]], "get_reward() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.get_reward", false]], "get_reward() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.get_reward", false]], "get_ucb_score() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.get_ucb_score", false]], "get_ucb_score() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.get_ucb_score", false]], "get_ucb_score() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.get_ucb_score", false]], "get_undo_actions() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.get_undo_actions", false]], "get_undo_actions() (circuitree.models.dimersgrammar method)": [[11, "circuitree.models.DimersGrammar.get_undo_actions", false]], "get_undo_actions() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.get_undo_actions", false]], "get_unique_state() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.get_unique_state", false]], "get_unique_state() (circuitree.models.dimersgrammar method)": [[11, "circuitree.models.DimersGrammar.get_unique_state", false]], "get_unique_state() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.get_unique_state", false]], "grow_tree() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.grow_tree", false]], "grow_tree() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.grow_tree", false]], "grow_tree() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.grow_tree", false]], "grow_tree_from_leaves() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.grow_tree_from_leaves", false]], "grow_tree_from_leaves() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.grow_tree_from_leaves", false]], "grow_tree_from_leaves() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.grow_tree_from_leaves", false]], "has_pattern() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.has_pattern", false]], "has_pattern() (circuitree.models.dimersgrammar static method)": [[11, "circuitree.models.DimersGrammar.has_pattern", false]], "has_pattern() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.has_pattern", false]], "is_set() (circuitree.utils.managedevent method)": [[15, "circuitree.utils.ManagedEvent.is_set", false]], "is_success() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.is_success", false]], "is_success() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.is_success", false]], "is_success() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.is_success", false]], "is_terminal() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.is_terminal", false]], "is_terminal() (circuitree.models.dimersgrammar static method)": [[11, "circuitree.models.DimersGrammar.is_terminal", false]], "is_terminal() (circuitree.models.simplenetworkgrammar static method)": [[12, "circuitree.models.SimpleNetworkGrammar.is_terminal", false]], "isset() (circuitree.utils.managedevent method)": [[15, "circuitree.utils.ManagedEvent.isSet", false]], "managedevent (class in circuitree.utils)": [[15, "circuitree.utils.ManagedEvent", false]], "merge_overlapping_sets() (in module circuitree.utils)": [[16, "circuitree.utils.merge_overlapping_sets", false]], "parse_genotype() (circuitree.models.dimersgrammar static method)": [[11, "circuitree.models.DimersGrammar.parse_genotype", false]], "parse_genotype() (circuitree.models.simplenetworkgrammar static method)": [[12, "circuitree.models.SimpleNetworkGrammar.parse_genotype", false]], "plot_complexity() (in module circuitree.viz)": [[18, "circuitree.viz.plot_complexity", false]], "plot_network() (in module circuitree.viz)": [[19, "circuitree.viz.plot_network", false]], "rgb2hex() (in module circuitree.viz)": [[20, "circuitree.viz.rgb2hex", false]], "sample_successful_circuits_by_enumeration() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.sample_successful_circuits_by_enumeration", false]], "sample_successful_circuits_by_enumeration() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.sample_successful_circuits_by_enumeration", false]], "sample_successful_circuits_by_enumeration() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.sample_successful_circuits_by_enumeration", false]], "sample_successful_circuits_by_rejection() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.sample_successful_circuits_by_rejection", false]], "sample_successful_circuits_by_rejection() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.sample_successful_circuits_by_rejection", false]], "sample_successful_circuits_by_rejection() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.sample_successful_circuits_by_rejection", false]], "sample_terminal_states() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.sample_terminal_states", false]], "sample_terminal_states() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.sample_terminal_states", false]], "sample_terminal_states() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.sample_terminal_states", false]], "search_bfs() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.search_bfs", false]], "search_bfs() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.search_bfs", false]], "search_bfs() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.search_bfs", false]], "search_mcts() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.search_mcts", false]], "search_mcts() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.search_mcts", false]], "search_mcts() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.search_mcts", false]], "search_mcts_parallel() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.search_mcts_parallel", false]], "search_mcts_parallel() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.search_mcts_parallel", false]], "search_mcts_parallel() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.search_mcts_parallel", false]], "select_and_expand() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.select_and_expand", false]], "select_and_expand() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.select_and_expand", false]], "select_and_expand() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.select_and_expand", false]], "set() (circuitree.utils.managedevent method)": [[15, "circuitree.utils.ManagedEvent.set", false]], "simplenetworkgrammar (class in circuitree.models)": [[12, "circuitree.models.SimpleNetworkGrammar", false]], "simplenetworktree (class in circuitree.models)": [[13, "circuitree.models.SimpleNetworkTree", false]], "terminal_states (circuitree.circuitree.circuitree property)": [[7, "circuitree.circuitree.CircuiTree.terminal_states", false]], "terminal_states (circuitree.models.dimernetworktree property)": [[10, "circuitree.models.DimerNetworkTree.terminal_states", false]], "terminal_states (circuitree.models.simplenetworktree property)": [[13, "circuitree.models.SimpleNetworkTree.terminal_states", false]], "test_pattern_significance() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.test_pattern_significance", false]], "test_pattern_significance() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.test_pattern_significance", false]], "test_pattern_significance() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.test_pattern_significance", false]], "to_complexity_graph() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.to_complexity_graph", false]], "to_complexity_graph() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.to_complexity_graph", false]], "to_complexity_graph() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.to_complexity_graph", false]], "to_dict() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.to_dict", false]], "to_dict() (circuitree.models.dimersgrammar method)": [[11, "circuitree.models.DimersGrammar.to_dict", false]], "to_dict() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.to_dict", false]], "to_file() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.to_file", false]], "to_file() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.to_file", false]], "to_file() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.to_file", false]], "to_string() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.to_string", false]], "to_string() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.to_string", false]], "to_string() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.to_string", false]], "traverse() (circuitree.circuitree.circuitree method)": [[7, "circuitree.circuitree.CircuiTree.traverse", false]], "traverse() (circuitree.models.dimernetworktree method)": [[10, "circuitree.models.DimerNetworkTree.traverse", false]], "traverse() (circuitree.models.simplenetworktree method)": [[13, "circuitree.models.SimpleNetworkTree.traverse", false]], "ucb_score() (in module circuitree.circuitree)": [[8, "circuitree.circuitree.ucb_score", false]], "undo_action() (circuitree.grammar.circuitgrammar method)": [[9, "circuitree.grammar.CircuitGrammar.undo_action", false]], "undo_action() (circuitree.models.dimersgrammar method)": [[11, "circuitree.models.DimersGrammar.undo_action", false]], "undo_action() (circuitree.models.simplenetworkgrammar method)": [[12, "circuitree.models.SimpleNetworkGrammar.undo_action", false]], "wait() (circuitree.utils.managedevent method)": [[15, "circuitree.utils.ManagedEvent.wait", false]]}, "objects": {"circuitree.circuitree": [[7, 0, 1, "", "CircuiTree"], [8, 3, 1, "", "ucb_score"]], "circuitree.circuitree.CircuiTree": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "backpropagate_reward"], [7, 1, 1, "", "backpropagate_visit"], [7, 1, 1, "", "bfs_iterator"], [7, 1, 1, "", "copy_graph"], [7, 2, 1, "", "default_attrs"], [7, 1, 1, "", "enumerate_terminal_states"], [7, 1, 1, "", "expand_edge"], [7, 1, 1, "", "from_file"], [7, 1, 1, "", "generate_gml"], [7, 1, 1, "", "get_attributes"], [7, 1, 1, "", "get_random_terminal_descendant"], [7, 1, 1, "", "get_reward"], [7, 1, 1, "", "get_ucb_score"], [7, 1, 1, "", "grow_tree"], [7, 1, 1, "", "grow_tree_from_leaves"], [7, 1, 1, "", "is_success"], [7, 1, 1, "", "sample_successful_circuits_by_enumeration"], [7, 1, 1, "", "sample_successful_circuits_by_rejection"], [7, 1, 1, "", "sample_terminal_states"], [7, 1, 1, "", "search_bfs"], [7, 1, 1, "", "search_mcts"], [7, 1, 1, "", "search_mcts_parallel"], [7, 1, 1, "", "select_and_expand"], [7, 2, 1, "", "terminal_states"], [7, 1, 1, "", "test_pattern_significance"], [7, 1, 1, "", "to_complexity_graph"], [7, 1, 1, "", "to_file"], [7, 1, 1, "", "to_string"], [7, 1, 1, "", "traverse"]], "circuitree.grammar": [[9, 0, 1, "", "CircuitGrammar"]], "circuitree.grammar.CircuitGrammar": [[9, 1, 1, "", "__init__"], [9, 1, 1, "", "do_action"], [9, 1, 1, "", "get_actions"], [9, 1, 1, "", "get_undo_actions"], [9, 1, 1, "", "get_unique_state"], [9, 1, 1, "", "has_pattern"], [9, 1, 1, "", "is_terminal"], [9, 1, 1, "", "to_dict"], [9, 1, 1, "", "undo_action"]], "circuitree.models": [[10, 0, 1, "", "DimerNetworkTree"], [11, 0, 1, "", "DimersGrammar"], [12, 0, 1, "", "SimpleNetworkGrammar"], [13, 0, 1, "", "SimpleNetworkTree"]], "circuitree.models.DimerNetworkTree": [[10, 1, 1, "", "__init__"], [10, 1, 1, "", "backpropagate_reward"], [10, 1, 1, "", "backpropagate_visit"], [10, 1, 1, "", "bfs_iterator"], [10, 1, 1, "", "copy_graph"], [10, 2, 1, "", "default_attrs"], [10, 1, 1, "", "enumerate_terminal_states"], [10, 1, 1, "", "expand_edge"], [10, 1, 1, "", "from_file"], [10, 1, 1, "", "generate_gml"], [10, 1, 1, "", "get_attributes"], [10, 1, 1, "", "get_random_terminal_descendant"], [10, 1, 1, "", "get_reward"], [10, 1, 1, "", "get_ucb_score"], [10, 1, 1, "", "grow_tree"], [10, 1, 1, "", "grow_tree_from_leaves"], [10, 1, 1, "", "is_success"], [10, 1, 1, "", "sample_successful_circuits_by_enumeration"], [10, 1, 1, "", "sample_successful_circuits_by_rejection"], [10, 1, 1, "", "sample_terminal_states"], [10, 1, 1, "", "search_bfs"], [10, 1, 1, "", "search_mcts"], [10, 1, 1, "", "search_mcts_parallel"], [10, 1, 1, "", "select_and_expand"], [10, 2, 1, "", "terminal_states"], [10, 1, 1, "", "test_pattern_significance"], [10, 1, 1, "", "to_complexity_graph"], [10, 1, 1, "", "to_file"], [10, 1, 1, "", "to_string"], [10, 1, 1, "", "traverse"]], "circuitree.models.DimersGrammar": [[11, 1, 1, "", "__init__"], [11, 2, 1, "", "dimer_options"], [11, 1, 1, "", "do_action"], [11, 2, 1, "", "edge_options"], [11, 1, 1, "", "get_actions"], [11, 1, 1, "", "get_genotype_parts"], [11, 1, 1, "", "get_undo_actions"], [11, 1, 1, "", "get_unique_state"], [11, 1, 1, "", "has_pattern"], [11, 1, 1, "", "is_terminal"], [11, 1, 1, "", "parse_genotype"], [11, 1, 1, "", "to_dict"], [11, 1, 1, "", "undo_action"]], "circuitree.models.SimpleNetworkGrammar": [[12, 1, 1, "", "__init__"], [12, 2, 1, "", "component_codes"], [12, 1, 1, "", "do_action"], [12, 1, 1, "", "get_actions"], [12, 1, 1, "", "get_component_recolorings"], [12, 1, 1, "", "get_recolorings"], [12, 1, 1, "", "get_undo_actions"], [12, 1, 1, "", "get_unique_state"], [12, 1, 1, "", "has_pattern"], [12, 1, 1, "", "is_terminal"], [12, 1, 1, "", "parse_genotype"], [12, 1, 1, "", "to_dict"], [12, 1, 1, "", "undo_action"]], "circuitree.models.SimpleNetworkTree": [[13, 1, 1, "", "__init__"], [13, 1, 1, "", "backpropagate_reward"], [13, 1, 1, "", "backpropagate_visit"], [13, 1, 1, "", "bfs_iterator"], [13, 1, 1, "", "copy_graph"], [13, 2, 1, "", "default_attrs"], [13, 1, 1, "", "enumerate_terminal_states"], [13, 1, 1, "", "expand_edge"], [13, 1, 1, "", "from_file"], [13, 1, 1, "", "generate_gml"], [13, 1, 1, "", "get_attributes"], [13, 1, 1, "", "get_random_terminal_descendant"], [13, 1, 1, "", "get_reward"], [13, 1, 1, "", "get_ucb_score"], [13, 1, 1, "", "grow_tree"], [13, 1, 1, "", "grow_tree_from_leaves"], [13, 1, 1, "", "is_success"], [13, 1, 1, "", "sample_successful_circuits_by_enumeration"], [13, 1, 1, "", "sample_successful_circuits_by_rejection"], [13, 1, 1, "", "sample_terminal_states"], [13, 1, 1, "", "search_bfs"], [13, 1, 1, "", "search_mcts"], [13, 1, 1, "", "search_mcts_parallel"], [13, 1, 1, "", "select_and_expand"], [13, 2, 1, "", "terminal_states"], [13, 1, 1, "", "test_pattern_significance"], [13, 1, 1, "", "to_complexity_graph"], [13, 1, 1, "", "to_file"], [13, 1, 1, "", "to_string"], [13, 1, 1, "", "traverse"]], "circuitree.utils": [[14, 0, 1, "", "AtomicCounter"], [15, 0, 1, "", "ManagedEvent"], [16, 3, 1, "", "merge_overlapping_sets"]], "circuitree.utils.AtomicCounter": [[14, 1, 1, "", "__init__"]], "circuitree.utils.ManagedEvent": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "clear"], [15, 1, 1, "", "isSet"], [15, 1, 1, "", "is_set"], [15, 1, 1, "", "set"], [15, 1, 1, "", "wait"]], "circuitree.viz": [[17, 3, 1, "", "complexity_layout"], [18, 3, 1, "", "plot_complexity"], [19, 3, 1, "", "plot_network"], [20, 3, 1, "", "rgb2hex"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function"}, "terms": {"": [1, 5, 7, 10, 13, 21], "0": [1, 5, 7, 8, 10, 13, 17, 18, 19, 21], "00": 1, "000": 1, "01": [1, 19], "06it": 1, "07": 1, "075": 18, "1": [5, 7, 8, 10, 11, 13, 18], "10": [0, 1, 5, 7, 10, 13, 18], "100": [1, 7, 10, 13], "1000": [7, 10, 13], "10000000": [7, 10, 13], "101": 1, "1038": [7, 10, 13], "10_000": 21, "11": [1, 5], "11it": 1, "12": 1, "128": 12, "13": 1, "1300x500": 1, "14": 1, "15": [1, 19], "16": 1, "1688": 1, "17": 1, "18": 1, "19": 1, "2": [5, 7, 8, 10, 11, 12, 13, 17, 19], "20": 1, "2010": [7, 10, 13], "2023": [7, 10, 13], "2024": 21, "2055": 1, "206": 1, "21": 1, "21045819": [7, 10, 13], "22": 1, "23": 1, "24": [1, 5], "240513_bistabl": 1, "25": [1, 18], "26": 1, "27": 1, "28": 1, "29": 1, "2f": 1, "3": [0, 5, 11, 18], "30": 1, "31": 1, "32": [1, 21], "33": 1, "34": 1, "35": 1, "36": 1, "37": 1, "38": 1, "39": [1, 5], "4": [1, 5, 11, 19], "40": 1, "41": 1, "4142135623730951": 8, "42": 1, "422": 1, "425": [7, 10, 13], "43": 1, "44": 1, "45": 1, "46": 1, "47": 1, "48": 1, "49": 1, "5": [1, 7, 10, 13, 17, 19], "50": 1, "500": 1, "50000": 1, "50001": 1, "50_000": 1, "50_001": 1, "51": 1, "51it": 1, "52": 1, "53": 1, "54": 1, "55": 1, "56": 1, "57": 1, "58": 1, "59": 1, "6": [1, 7, 10, 13, 18, 19], "60": 1, "61": 1, "614": 1, "62": 1, "63": 1, "6379": 21, "64": 1, "65": 1, "66": 1, "67": 1, "68": 1, "69": 1, "7": 1, "70": 1, "71": 1, "71565358": 14, "72": 1, "73": 1, "74": [1, 7, 10, 13], "745": 1, "75": 1, "76": 1, "77": 1, "78": 1, "79": 1, "8": [1, 5, 21], "80": 1, "81": [1, 5], "82": 1, "83": 1, "84": 1, "85": 1, "86": 1, "86it": 1, "87": 1, "88": 1, "89": 1, "9": [1, 19, 21], "90": 1, "91": 1, "92": 1, "93": 1, "94": 1, "95": [1, 7, 10, 13], "96": 1, "97": 1, "98": 1, "99": 1, "A": [1, 5, 7, 9, 10, 11, 12, 13, 14, 21], "As": [5, 21], "By": 1, "For": [0, 1, 5, 7, 9, 10, 11, 12, 13, 21], "If": [1, 5, 7, 9, 10, 11, 12, 13, 15, 21], "In": [1, 5, 6, 7, 9, 10, 12, 13, 17, 21], "It": [1, 7, 8, 10, 13, 21], "No": 5, "That": [9, 21], "The": [5, 6, 7, 8, 9, 10, 11, 12, 13, 21], "Then": [1, 7, 10, 13, 15, 21], "There": [5, 7, 21], "These": [7, 10, 13], "To": [1, 5, 9, 21], "With": 1, "_": [1, 5, 11, 12], "__grammar_cls__": [7, 9, 10, 11, 12, 13], "__init__": [1, 5, 7, 9, 10, 11, 12, 13, 14, 15], "__main__": 21, "__name__": 21, "_bistability_search_": 1, "_bistabl": 1, "_description_": 12, "_non_serializable_attr": [7, 10, 13], "_parallel_bistability_search_step": 21, "aa": 5, "aaa": [1, 5], "aaa_aba": 5, "aaa_aba_baa": 5, "aaa_aba_baa_bba": 5, "aaa_aba_baa_bbi": 5, "aaa_aba_bai": 5, "aaa_aba_bai_bba": 5, "aaa_aba_bai_bbi": 5, "aaa_aba_bba": 5, "aaa_aba_bbi": 5, "aaa_abi": 5, "aaa_abi_baa": 5, "aaa_abi_baa_bba": 5, "aaa_abi_baa_bbi": 5, "aaa_abi_bai": 5, "aaa_abi_bai_bba": 5, "aaa_abi_bai_bbi": 5, "aaa_abi_bba": 5, "aaa_abi_bbi": 5, "aaa_baa": 5, "aaa_baa_bba": 5, "aaa_baa_bbi": 5, "aaa_bai": 5, "aaa_bai_bba": 5, "aaa_bai_bbi": 5, "aaa_bba": 5, "aaa_bbi": 5, "aai": 5, "aai_aba": 5, "aai_aba_baa": 5, "aai_aba_baa_bba": 5, "aai_aba_baa_bbi": 5, "aai_aba_bai": 5, "aai_aba_bai_bba": 5, "aai_aba_bai_bbi": 5, "aai_aba_bba": 5, "aai_aba_bbi": 5, "aai_abi": 5, "aai_abi_baa": 5, "aai_abi_baa_bba": 5, "aai_abi_baa_bbi": 5, "aai_abi_bai": 5, "aai_abi_bai_bba": 5, "aai_abi_bai_bbi": 5, "aai_abi_bba": 5, "aai_abi_bbi": 5, "aai_baa": 5, "aai_baa_bba": 5, "aai_baa_bbi": 5, "aai_bai": 5, "aai_bai_bba": 5, "aai_bai_bbi": 5, "aai_bba": 5, "aai_bbi": 5, "ab": [5, 11], "aba": 5, "aba_baa": [1, 5], "aba_baa_bba": 5, "aba_baa_bbi": 5, "aba_bai": 5, "aba_bai_aaa": 5, "aba_bai_bba": 5, "aba_bai_bbi": 5, "aba_bba": 5, "aba_bbi": 5, "aba_bca_caa": 1, "aba_bci_cai": 1, "abbrevi": 12, "abc": [1, 21], "abi": 5, "abi_baa": 5, "abi_baa_bba": 5, "abi_baa_bbi": 5, "abi_bai": [1, 5], "abi_bai_bba": 5, "abi_bai_bbi": 5, "abi_bba": 5, "abi_bbi": 5, "about": [7, 10, 13], "abov": 1, "abstract": [5, 7, 9, 10, 13], "accept": [7, 10, 13], "access": [1, 7, 10, 13], "account": [9, 11, 12], "achiev": [1, 5, 21], "across": [7, 10, 13, 14, 21], "action": [1, 5, 7, 9, 10, 11, 12, 13], "activ": [1, 5, 11, 12, 19, 21], "actual": [1, 7, 10, 13, 21], "acycl": [7, 10, 13], "ad": [5, 7, 9, 10, 11, 12, 13, 21], "add": [1, 5, 7, 10, 12, 13], "add_subplot": 1, "addit": [1, 7, 10, 13], "addition": 0, "address": 21, "advantag": 21, "affect": [1, 5, 21], "after": [1, 7, 10, 11, 12, 13], "again": 15, "algorithm": [1, 7, 10, 13, 21], "all": [1, 5, 7, 9, 10, 11, 12, 13, 15, 21], "alloc": 1, "allow": [1, 5, 7, 10, 12, 13, 21], "alo": 21, "alpha": [1, 18], "alphabet": [5, 11, 12], "alreadi": [7, 10, 13, 21], "also": [1, 6, 7, 15, 21], "altern": [7, 10, 13], "alwai": [5, 9, 15], "amazon": 21, "among": [7, 10, 13], "an": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21], "analyz": 21, "angela": 5, "ani": [1, 5, 7, 9, 10, 11, 12, 13, 16, 21], "anim_dir": 1, "anim_fil": 1, "anoth": [1, 15, 21], "api": [2, 4, 6], "append": 5, "appli": [9, 12], "approach": 1, "ar": [1, 5, 6, 7, 9, 10, 11, 12, 13, 15, 17, 21], "architectur": [1, 2, 6], "area": 1, "arg": [1, 5, 9, 11, 12], "argument": [1, 5, 7, 10, 11, 13, 15, 21], "arib_bbab": 11, "arrai": [11, 12], "arrang": 1, "arriv": 21, "artifici": 1, "aspect": [1, 17], "assembl": [1, 5, 12], "assembli": [1, 5, 9, 11, 12], "associ": [7, 10, 13], "assum": [1, 9], "asterisk": [11, 12], "asynchron": 21, "asyncresult": 21, "atla": [7, 10, 13], "atom": 14, "attribut": [1, 7, 10, 11, 12, 13, 21], "attrs_copi": [7, 10, 13], "attrs_json": [7, 10, 13], "audio": 1, "author": 5, "auto_pad": 19, "auto_shrink": [1, 19], "autocatalysi": 5, "autoregul": 1, "aux": 21, "averag": 1, "awaken": 15, "ax": [1, 18, 19], "ax1": 1, "ax2": 1, "axi": 19, "b": [1, 5, 11, 21], "ba": 5, "baa": 5, "baa_bba": 5, "baa_bbi": 5, "back": [7, 9, 10, 13], "backend": 21, "background": 21, "backpropag": [7, 10, 13], "backpropagate_reward": [7, 10, 13], "backpropagate_visit": [7, 10, 13], "backup": [1, 15, 21], "bai": 5, "bai_abi": 5, "bai_bba": 5, "bai_bbi": 5, "balanc": [1, 8], "bandwidth": 21, "bar": [0, 7, 10, 13], "barnard_ok": [7, 10, 13], "base": [1, 7, 8, 10, 13, 17, 21], "basic": [0, 7, 12], "bb": 5, "bba": [1, 5], "bbi": 5, "becaus": [7, 10, 13, 21], "becom": [15, 21], "been": 12, "befor": [1, 7, 10, 13], "begin": [7, 10, 11, 13], "behavior": 2, "being": [7, 10, 13, 21], "benefici": 9, "best": 2, "between": [1, 5, 8, 11, 12, 21], "bewar": 21, "bf": [7, 10, 13], "bfs_iter": [7, 10, 13], "bind": 11, "biol": [7, 10, 13], "biolog": 12, "bistability_app": 21, "bistability_parallel": 21, "bistabilitytre": [1, 21], "bistabl": [1, 21], "block": 15, "block_clr": 18, "block_height": 18, "bool": [1, 5, 7, 9, 10, 11, 12, 13, 18, 21], "boost": 21, "borrow": 1, "both": [1, 5, 7, 9, 10, 11, 12, 13], "bottleneck": 21, "bound": [1, 5], "breadth": [7, 10, 13], "brief": 21, "broker": 21, "browser": 1, "build": [1, 5], "built": [1, 2, 6, 21], "c": [1, 14], "cach": 12, "cache_maxs": 12, "calcul": [1, 7, 10, 13, 21], "call": [1, 5, 7, 10, 13, 15], "callabl": [7, 10, 13], "callback": [1, 7, 10, 13], "callback_before_start": [1, 7, 10, 13], "callback_everi": [1, 7, 10, 13], "can": [1, 5, 6, 7, 9, 10, 11, 12, 13, 14, 21], "candid": 1, "cannot": 21, "care": 21, "carlo": [1, 2, 7, 10, 13], "case": [1, 6, 7, 9, 10, 13], "catalyz": 5, "caus": 5, "cca": 1, "cd": 21, "celeri": 0, "celery_broker_url": 21, "cell": [1, 5], "center": [1, 19], "certain": [5, 7, 10, 13], "chang": 1, "charact": [5, 11, 12], "chau": 5, "check": [1, 5, 7, 9, 10, 11, 12, 13], "child": [7, 8, 10, 13], "chosen": [7, 10, 13], "chunksiz": [7, 10, 13], "circl": 1, "circuit": [1, 5, 6, 7, 9, 10, 11, 12, 13, 21], "circuitgrammar": [1, 2, 6, 7, 10, 13], "circuitre": [0, 5, 6, 21], "circular": 19, "class": [2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 21], "classmethod": [7, 10, 13], "clear": [1, 15], "cli": 21, "click": 1, "close": 1, "cloud": 2, "cluster": [7, 10, 13], "cmap": 19, "code": [11, 12], "colleagu": 5, "color": [19, 20], "colormap": 19, "column": [11, 12], "com": 14, "combin": [8, 21], "come": 6, "command": 21, "common": 6, "commun": 21, "compar": 7, "complet": [1, 5, 15, 21], "complex": [1, 7, 10, 13, 17, 18], "complexity_label": 18, "compon": [1, 5, 10, 11, 12, 13, 19], "component_cod": 12, "compress": [7, 10, 13], "comput": [0, 1, 7, 8, 10, 12, 13, 21], "computation": [7, 10, 13], "compute_uniqu": [7, 10, 13], "concaten": [11, 12], "concentr": 1, "concurr": 21, "condit": [1, 7, 10, 13], "confid": [7, 10, 13], "connect": [11, 12, 21], "connectionerror": 21, "consid": [1, 5, 7, 10, 12, 13], "consist": [5, 7, 10, 11, 13], "constant": 8, "construct": 1, "constructor": [7, 10, 13], "consum": 21, "contain": [1, 5, 7, 9, 10, 11, 12, 13, 17, 21], "context": 15, "conting": [7, 10, 13], "continu": 21, "control": [7, 8, 10, 13], "conveni": [5, 10, 13], "convent": 5, "converg": [7, 10, 13], "convert": [7, 9, 10, 11, 12, 13, 20], "coordin": [17, 21], "copi": [7, 10, 13], "copy_graph": [7, 10, 13], "core": [7, 10, 13], "corner": 21, "correct": [7, 10, 13, 21], "correspond": 1, "cost": 1, "costli": 1, "cotterel": [7, 10, 13], "could": [5, 11, 19, 21], "count": [1, 7, 8, 10, 13, 14], "counter": 14, "cpu": 21, "cpython": [1, 5], "creat": [7, 9, 10, 13, 21], "cumul": 1, "current": [7, 9, 10, 11, 12, 13], "custom": [1, 2, 6, 9], "cycl": [1, 7, 9, 10, 13], "cypthon": 14, "d": [1, 21], "dag": [7, 10, 13], "data": [1, 21], "data_dir": 21, "database_url": 21, "datafram": [7, 10, 13], "datetim": [1, 21], "decid": 5, "decis": [1, 5], "declar": 21, "decor": 21, "deep": [7, 10, 13], "deepcopi": [7, 10, 13], "def": [1, 5, 21], "default": [1, 7, 8, 10, 11, 12, 13, 21], "default_attr": [7, 10, 13], "default_rng": [1, 21], "defin": [2, 7, 9, 10, 13, 21], "definit": [7, 10, 13], "degrad": 21, "delai": 21, "delet": 1, "denot": [5, 11], "depend": [7, 10, 13], "deprec": 15, "depth": [7, 10, 13, 17], "descript": 5, "design": [1, 5, 7, 10, 11, 13, 21], "detach": 21, "detail": [1, 7, 9, 10, 13, 21], "determin": [7, 9, 10, 11, 12, 13], "determinist": [7, 9, 10, 11, 13], "diagram": [1, 19], "dict": [1, 7, 9, 10, 11, 12, 13, 17, 18], "dictionari": [7, 9, 10, 11, 12, 13], "differ": [1, 5, 7, 10, 11, 12, 13, 21], "digraph": [1, 7, 8, 10, 13], "dimer": 11, "dimer_opt": 11, "dimersgrammar": 10, "direct": [7, 8, 10, 13, 17], "directli": [7, 10, 13, 21], "disk": [7, 10, 13], "dispatch": 21, "displai": [7, 10, 13], "distanc": 17, "distinct": [5, 11], "distribut": [0, 1, 2, 5, 7, 10, 13], "divid": [1, 7, 10, 13], "do": [1, 5, 7, 10, 13, 21], "do_act": [5, 9, 11, 12], "docstr": [7, 10, 13], "document": [4, 9], "doe": [5, 9, 11, 12, 21], "doesn": 1, "doi": [7, 10, 13], "done": 21, "downstream": [7, 10, 13], "dozen": 21, "drawn": 1, "due": [7, 10, 13], "dummi": 1, "dure": [1, 7, 8, 10, 13, 15], "dy": 17, "e": [1, 19], "each": [1, 5, 7, 9, 10, 11, 12, 13, 17, 21], "earli": [1, 7, 10, 13], "ec": 19, "ec2": 21, "edg": [1, 7, 10, 13], "edge_opt": 11, "edit": 21, "editor": 1, "either": [1, 5, 12], "elaps": 14, "elasticach": 21, "element": [7, 10, 13], "els": [1, 5, 21], "empir": 1, "empti": [9, 11, 16], "encod": [1, 12], "encount": [7, 10, 13], "end": [1, 7, 9, 10, 13], "entir": [5, 7, 10, 13], "entri": [9, 15], "enumer": [1, 5, 6, 7, 10, 13], "enumerate_terminal_st": [7, 10, 13], "environ": [0, 21], "enzym": 5, "equival": 12, "error": 5, "estim": [1, 7, 10, 13], "evalu": [1, 7, 10, 13, 21], "even": 1, "event": 15, "everi": [1, 5, 7, 10, 13, 21], "exactli": [7, 10, 13], "exampl": [1, 5, 7, 9, 10, 11, 12, 13, 14, 21], "except": [7, 10, 13, 15, 21], "exclud": [7, 10, 13], "exclude_self": [7, 10, 13], "execut": [7, 10, 13, 21], "exhaust": [7, 10, 13], "exhibit": 1, "exist": [5, 7, 10, 13], "exist_ok": [1, 21], "exit": 15, "expand": [5, 7, 10, 13], "expand_edg": [7, 10, 13], "expans": [7, 10, 13], "expect": 5, "expens": [1, 7, 10, 13, 21], "experiment": [7, 9, 11, 12], "explicitli": 6, "exploit": [7, 8, 10, 13], "explor": [1, 5, 7, 8, 10, 13], "exploration_const": [1, 7, 8, 10, 13], "express": 5, "extract": 7, "extrem": 5, "f": [1, 5, 21], "factor": 1, "fals": [1, 7, 10, 12, 13, 15, 21], "fast": 21, "favor": 1, "featur": [1, 9], "feedback": [1, 12, 21], "feel": 1, "few": [1, 6, 21], "fewer": [1, 21], "ffmpeg": 1, "fig": [1, 18], "figsiz": [1, 18], "figur": [1, 18], "file": [1, 7, 9, 10, 11, 12, 13, 21], "filter": 1, "final": [1, 21], "find": [1, 7, 9, 10, 13, 21], "finish": [11, 21], "finit": [7, 10, 13], "first": [1, 5, 7, 10, 11, 12, 13, 21], "five": [7, 10, 13], "fix": [7, 10, 12, 13], "fixed_compon": [12, 13], "flag": [7, 10, 13, 15, 21], "flat": 18, "float": [1, 7, 8, 10, 13, 15, 17, 18, 19, 21], "fly": 5, "focus": 1, "folder": [1, 21], "follow": [0, 1, 5, 7, 9, 10, 12, 13, 21], "fontsiz": 19, "form": [5, 9, 11], "format": [1, 7, 10, 12, 13], "forward": 5, "found": [1, 5, 21], "four": 5, "fp": 1, "fraction": 15, "frame": 1, "framework": [7, 10, 13, 21], "free": 21, "frequenc": [7, 10, 13], "from": [1, 5, 7, 9, 10, 11, 12, 13, 14, 17, 21], "from_fil": [1, 7, 10, 13, 21], "from_url": 21, "fulli": [1, 5, 11, 12], "func": [7, 10, 13], "funcanim": 1, "function": [2, 5, 7, 10, 13], "further": 9, "futur": [7, 21], "g": [1, 19], "game": [1, 5, 9, 11], "gaussian": 1, "gen1": 12, "gen2": 12, "gen3": 12, "gen4": 12, "gene": [7, 10, 13], "gener": [1, 7, 10, 13, 21], "generate_gml": [7, 10, 13], "generate_st": 21, "genotyp": [11, 12], "get": [5, 9, 11, 12, 21], "get_act": [5, 9, 11, 12], "get_attribut": [7, 10, 13], "get_bistability_reward": [1, 21], "get_component_recolor": 12, "get_genotype_part": 11, "get_mean_reward": 1, "get_random_terminal_descend": [7, 10, 13], "get_recolor": 12, "get_reward": [1, 5, 7, 10, 13, 21], "get_reward_celeri": 21, "get_ucb_scor": [7, 10, 13], "get_undo_act": [9, 11, 12], "get_unique_st": [5, 9, 11, 12], "gevent": [0, 7, 10, 13, 21], "given": [1, 7, 9, 10, 11, 12, 13, 15, 16, 21], "glob": [1, 21], "global": [7, 10, 13], "gml": [1, 7, 10, 13, 21], "gml_file": [1, 7, 10, 13, 21], "good": [1, 21], "gradient": [7, 10, 13], "grammar": [2, 6, 7, 10, 11, 12, 13, 21], "grammar_cl": [1, 7, 10, 13, 21], "grammar_kwarg": [7, 10, 13], "graph": [7, 8, 10, 13, 17, 21], "graph_gml": [7, 10, 13], "great": 1, "green": 21, "grep": 21, "group": 21, "grow_tre": [5, 7, 10, 13], "grow_tree_from_leav": [7, 10, 13], "growth": [7, 10, 13], "gt": 1, "guid": [7, 10, 13], "gzip": [7, 10, 13], "ha": [0, 1, 11, 12, 21], "happen": 5, "has_pattern": [1, 9, 11, 12], "hashabl": [5, 7, 8, 9, 10, 11, 13], "hasn": 5, "have": [1, 5, 16, 17, 21], "here": [1, 5, 21], "heterodim": 11, "hex": 20, "high": [1, 21], "higher": [1, 21], "highest": [1, 7, 10, 13], "highli": 21, "highlight": 1, "highlight_clr": 18, "highlight_min_visit": [1, 18], "homodim": 11, "host": 21, "how": [1, 5, 7, 9, 10, 13, 21], "hq_seed": 21, "html5": 1, "http": [14, 21], "hw": 19, "i": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 21], "id": [8, 9, 11, 12, 21], "ideal": [1, 7, 10, 13], "ident": 21, "identifi": [1, 7, 10, 13], "ignor": [1, 12], "imag": [9, 11, 12], "immedi": [15, 21], "implement": [1, 5, 7, 9, 10, 13, 14, 21], "implicitli": 6, "import": [1, 5, 21], "importerror": [7, 10, 13], "inact": 5, "inactiv": 5, "includ": [1, 7, 9, 10, 11, 13], "incom": 1, "incomplet": 1, "increas": 1, "increment": [7, 10, 13], "incur": [7, 10, 13], "index": [7, 10, 11, 13], "indic": [1, 9, 11, 12], "info": 21, "inform": [4, 7, 10, 13, 21], "infrastructur": 21, "inhibit": [1, 5, 11, 12, 19, 21], "initi": [1, 7, 10, 12, 13], "inlin": 1, "input": [1, 5, 7, 10, 13], "inspect": 21, "instal": [1, 2, 5, 7, 10, 13], "instanc": [1, 5, 7, 10, 12, 13, 21], "instanti": [9, 11, 12], "instead": [1, 15, 21], "instruct": 21, "int": [1, 7, 10, 11, 12, 13, 17, 18, 21], "int64": 19, "integ": 21, "intellig": 1, "intend": [7, 10, 11, 13], "intens": [7, 10, 13], "interact": [1, 5, 10, 11, 12, 13], "interactions_list": 5, "interest": 1, "interfac": [1, 7, 10, 13, 21], "intermedi": [7, 10, 13], "intern": 15, "interpret": [7, 10, 13], "intersect": 16, "introduc": 1, "invalid": [7, 10, 13], "involv": [11, 12], "io": 21, "ipympl": 1, "ipython": [1, 5], "ipython_displai": 1, "is_set": 15, "is_success": [1, 7, 10, 13], "is_termin": [1, 5, 7, 9, 10, 11, 12, 13], "isn": 21, "isomorph": [9, 11, 12], "isset": 15, "iter": [1, 7, 9, 10, 11, 12, 13, 14, 16, 19, 21], "itertool": 14, "its": [1, 7, 10, 11, 12, 13, 21], "itself": [1, 5], "j": [7, 10, 13], "join": 5, "joinpath": [1, 21], "json": [1, 7, 9, 10, 11, 12, 13, 21], "json_fil": [1, 7, 10, 13, 21], "jupyterlab": [1, 5], "just": [1, 21], "k": [18, 19], "kei": [1, 7, 9, 10, 11, 12, 13], "kernel": 5, "keyword": [1, 5, 7, 10, 13], "kill": 21, "known": [1, 7, 10, 13], "kw": 8, "kwarg": [1, 5, 7, 9, 10, 11, 12, 13, 18], "label": 11, "lambda": 1, "larg": [5, 6, 7, 10, 13], "larger": 1, "last": [7, 10, 13], "later": [7, 10, 13, 21], "layer": [1, 7, 10, 13, 17], "layout": [1, 17], "lead": [9, 11, 12], "learn": [1, 2], "least": [1, 7, 10, 13], "leav": [7, 10, 13], "left": [1, 5], "len": [1, 5, 12], "less": [1, 7, 10, 13], "let": [1, 5], "letter": [1, 5, 12], "level": [2, 6, 11, 21], "leverag": [7, 10, 13], "librari": [7, 10, 13], "lightsteelblu": 18, "lightweight": 21, "like": [1, 21], "limit": 11, "lin": 18, "line": [1, 21], "linux": 21, "list": [1, 5, 7, 9, 10, 11, 12, 13, 16, 21], "liter": [7, 10, 13, 18], "live": 21, "ll": [1, 21], "load": [1, 7, 10, 13], "load_ext": [1, 5], "loc": 1, "local": 21, "localhost": 21, "locat": 21, "lock": 21, "log": [7, 10, 13, 18, 21], "logfil": 21, "logger": [7, 10, 13], "loglevel": 21, "long": [5, 21], "longer": 21, "look": [1, 7, 10, 13, 21], "loop": [1, 9, 21], "loss": [7, 10, 13], "low": [1, 2, 6], "lowercas": [5, 11, 12], "lru": 12, "lt": 1, "lw": [18, 19], "m": [1, 12, 21], "machin": 2, "made": 5, "mai": [1, 5, 6, 7, 9, 11, 12, 21], "main": [1, 21], "make": [1, 5, 11, 12], "manag": [0, 15, 21], "mani": [1, 6, 9, 21], "manner": [7, 10, 13], "marker_clr": 18, "marker_s": 18, "matplotlib": 1, "matter": [5, 11], "max_interact": [10, 11, 12, 13], "max_interactions_per_promot": [10, 11], "max_it": [7, 10, 13], "maximum": 12, "mct": [1, 2, 7, 9, 10, 13], "mdm2": 12, "mean": [1, 5, 7, 8, 10, 11, 12, 13, 21], "meaning": 7, "measur": [1, 17], "mechan": [7, 10, 13], "membran": 5, "memori": [5, 7, 10, 13, 21], "merg": 16, "messag": [7, 10, 13, 21], "method": [1, 5, 7, 9, 10, 11, 12, 13, 14, 15, 21], "metric": 1, "might": 1, "mimic": 1, "min_visits_per_mov": 1, "minut": 1, "mirror": [9, 11, 12], "mkdir": [1, 21], "mode": [7, 10, 13], "model": [1, 5, 19, 21], "modif": 11, "modifi": 9, "modul": [1, 21], "mol": [7, 10, 13], "monitor": [7, 10, 13, 21], "monkei": 21, "monom": 11, "mont": [1, 2, 7, 10, 13], "more": [1, 4, 9, 10, 13], "morphogen": [7, 10, 13], "most": [1, 21], "motif": [7, 9, 10, 13], "move": [1, 5, 7, 10, 13], "moviepi": 1, "mp": 12, "mp4": 1, "mpi": 12, "mpi_pma": 12, "mpq": 12, "msb": [7, 10, 13], "multi": 21, "multif": 11, "multipl": [1, 5, 7, 9, 10, 11, 12, 13, 21], "must": [1, 5, 7, 9, 10, 13], "mutual": 1, "n": [1, 19], "n_cycl": [7, 10, 13], "n_repeat": [7, 10, 13], "n_sampl": [7, 10, 13], "n_step": [1, 7, 10, 13, 21], "n_thread": [7, 10, 13, 21], "n_to_highlight": [1, 18], "n_visit": [7, 10, 13], "name": [1, 7, 9, 10, 11, 12, 13, 19], "natur": 11, "ndarrai": [11, 12, 19], "necessari": [7, 10, 11, 12, 13], "need": [1, 5, 9, 11, 21], "neg": 12, "network": [1, 2, 5, 7, 9, 10, 11, 12, 13, 19, 21], "networkx": [0, 1, 7, 10, 13], "never": [9, 11], "new": [5, 7, 9, 10, 11, 12, 13, 21], "newer": 0, "next": [7, 10, 13, 21], "node": [1, 7, 8, 10, 13, 17], "node_lw": 19, "node_shrink": [1, 19], "nomin": 21, "non": [12, 16], "none": [1, 7, 8, 10, 11, 12, 13, 15, 18, 19], "nontermin": [12, 17], "nonterminal_ok": 12, "normal": [1, 7, 10, 13, 21], "notabl": 21, "note": [1, 5, 7, 10, 13, 21], "notebook": 21, "notimplementederror": [5, 7, 9, 10, 13], "nov": [7, 10, 13], "now": [1, 21], "np": [1, 7, 8, 10, 11, 12, 13, 21], "nproc": [7, 10, 13], "nprocs_sampl": [7, 10, 13], "nprocs_test": [7, 10, 13], "null": [7, 10, 13], "null_kwarg": [7, 10, 13], "null_sampl": [7, 10, 13], "number": [1, 7, 10, 11, 12, 13, 14, 15, 17, 21], "numpi": [0, 1, 11, 12, 21], "nx": [7, 8, 10, 13], "o": 21, "object": [1, 7, 10, 13, 15, 21], "obtain": [7, 10, 13], "obviou": 21, "occur": [7, 10, 13, 15], "offset": [1, 19], "often": [7, 10, 13], "onc": [1, 2, 15, 21], "one": [1, 5, 7, 9, 10, 11, 12, 13, 21], "ones": [5, 7, 10, 13], "onli": [1, 7, 10, 11, 12, 13, 15, 21], "open": 21, "oper": [14, 15], "optim": [1, 2], "option": [0, 1, 7, 8, 9, 10, 12, 13, 15, 21], "orang": [1, 18], "order": [1, 5, 7, 10, 11, 13, 21], "origin": 5, "other": [1, 5, 6, 7, 9, 10, 11, 12, 13, 21], "otherwis": [1, 7, 10, 13, 15], "our": [1, 5, 21], "out": [1, 5, 15], "outcom": [7, 10, 13], "outgo": 1, "output": [5, 7, 10, 13], "over": [1, 5, 7, 9, 10, 11, 12, 13, 21], "overal": [7, 10, 13], "overridden": [7, 10, 13], "own": [1, 21], "p": [1, 5, 7, 10, 12, 13, 21], "p53": 12, "packag": [0, 1, 2, 5, 6, 7, 9, 10, 13, 21], "pad": [1, 19], "pair": [5, 11, 12], "pairwis": [1, 5, 12], "panda": [0, 7, 10, 13], "paper": 5, "par": 1, "paradox": 21, "parallel": [0, 1, 2, 7, 10, 13], "parallel_bistability_search": 21, "parallelbistabilitytre": 21, "paramet": [7, 8, 9, 10, 11, 12, 13], "parent": [7, 8, 10, 13, 17], "pars": [11, 12], "parse_genotyp": [1, 11, 12, 19], "part": [5, 11, 12], "particular": [2, 9, 11, 12], "pass": [1, 7, 10, 13, 21], "patch": 21, "patch_al": 21, "path": [1, 7, 9, 10, 13, 21], "pathlib": [1, 21], "pathwai": 12, "pattern": [1, 7, 9, 10, 11, 12, 13], "paus": 1, "per": [7, 10, 13], "perfect": 21, "perform": [1, 7, 10, 13, 21], "period": 1, "permut": 12, "pfl": [1, 21], "phenotyp": 1, "philmarsh": 14, "pick": [11, 12], "pid": 21, "piec": 11, "ping": 21, "pip": [0, 1, 5], "plai": 1, "plan": 1, "plot": [1, 19], "plot_complex": 1, "plot_kwarg": 1, "plot_label": [1, 19], "plot_layers_as_block": 18, "plot_network": 1, "plt": 1, "pmc3010108": [7, 10, 13], "pmcid": [7, 10, 13], "pmid": [7, 10, 13], "po": 18, "point": [1, 7, 10, 13, 15, 21], "polar": 5, "polarizationgrammar": 5, "polarizationtre": 5, "pool": [7, 10, 13], "port": 21, "posit": [1, 21], "possibiilti": 5, "possibl": [1, 5, 7, 9, 10, 11, 12, 13, 21], "possibli": 1, "potenti": [7, 10, 11, 13], "pprint": 5, "practic": 21, "preferenti": 1, "prefix": 5, "presenc": 1, "present": [5, 7, 9, 10, 11, 12, 13, 15], "print": [1, 5, 7, 10, 12, 13, 21], "print_everi": [7, 10, 13], "print_upd": [7, 10, 13], "problem": [7, 10, 13, 21], "process": [1, 7, 10, 11, 12, 13, 21], "produc": 21, "progress": [0, 1, 7, 10, 13, 21], "progress_bar": [1, 7, 10, 13], "progress_callback": 1, "properli": [7, 10, 13], "properti": [7, 10, 11, 12, 13], "proportion": 1, "provid": [1, 7, 10, 11, 13, 15, 21], "purpos": [7, 10, 13], "py": 21, "pyplot": 1, "python": [0, 1, 2, 5, 21], "q": [5, 12], "qualiti": [1, 21], "queue": 21, "quiet": 1, "quit": [1, 21], "r": [1, 11], "rais": [5, 7, 9, 10, 11, 12, 13, 21], "random": [1, 7, 10, 13, 21], "randomli": [7, 10, 13], "rang": [1, 7, 10, 13], "rare": [7, 10, 13], "rather": 21, "re": [1, 9, 11, 12, 21], "reach": [1, 7, 9, 10, 13], "reachabl": [7, 10, 13], "reaction": 5, "read": 21, "real": 1, "reason": [1, 21], "recal": 1, "receiv": [17, 21], "recolor": [11, 12], "recommend": [7, 10, 13], "record": [7, 10, 13], "recurs": 5, "redi": 21, "redo": 1, "refer": [2, 5, 7, 10, 13], "region": 1, "regul": [1, 10, 11, 12], "regulatori": [7, 10, 11, 13], "reinforc": [1, 2], "reject": [7, 10, 13], "releas": 15, "remain": [11, 12], "rememb": 1, "remot": 21, "remov": 7, "renam": [1, 11, 12], "render": 1, "render_fram": 1, "reord": [11, 12], "repeat": [7, 10, 13], "replac": 21, "repli": 21, "repres": [1, 5, 7, 9, 10, 11, 12, 13, 17], "represent": [5, 7, 9, 10, 11, 12, 13], "request": [7, 10, 13, 21], "requir": [1, 5, 7, 10, 13, 14], "reset": 15, "resourc": 21, "respect": 12, "restart": 5, "result": [5, 7, 9, 10, 11, 13, 21], "return": [1, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 19, 21], "reveal": [7, 10, 13], "revers": [1, 5], "reward": [2, 7, 8, 10, 13], "rg": [1, 7, 10, 13, 21], "rgb": 20, "right": [1, 5], "rightarrow": 1, "rm": 1, "robust": [1, 21], "root": [1, 5, 7, 10, 12, 13, 17, 21], "row": 12, "rule": [1, 5, 9], "run": [7, 10, 13], "run_kwarg": [1, 7, 10, 13, 21], "run_search_parallel": 21, "s_i": 1, "s_j": 1, "safe": 14, "sai": [1, 5], "same": [5, 7, 9, 10, 11, 12, 13, 17, 21], "sampl": [7, 10, 13, 21], "sample_successful_circuits_by_enumer": [7, 10, 13], "sample_successful_circuits_by_reject": [7, 10, 13], "sample_terminal_st": [7, 10, 13], "sampling_method": [7, 10, 13], "save": [1, 7, 9, 10, 11, 12, 13, 21], "save_attr": [7, 10, 13], "save_dir": [1, 21], "save_stem": 21, "save_tree_callback": 1, "scalabl": 21, "scale": [1, 21], "scenario": 1, "schemat": 21, "scipi": 0, "score": [7, 8, 10, 13], "script": 21, "search": [2, 5, 7, 8, 9, 10, 11, 12, 13, 17], "search_bf": [7, 10, 13], "search_mct": [1, 7, 10, 13], "search_mcts_parallel": [1, 7, 10, 13, 21], "second": [1, 11, 15], "section": 21, "see": [1, 4, 7, 9, 10, 13, 21], "seed": [1, 7, 10, 13, 21], "seedsequ": 21, "seem": 1, "select": [7, 10, 13], "select_and_expand": [7, 10, 13], "selection_path": [1, 7, 10, 13], "self": [1, 5, 7, 10, 13, 21], "semin": 5, "send": 21, "separ": [1, 5, 7, 10, 11, 12, 13, 17, 21], "sequenc": [7, 10, 11, 12, 13], "sequenti": [7, 10, 13], "seri": 17, "serial": [7, 9, 10, 11, 12, 13], "serializ": [7, 10, 13], "server": 21, "set": [1, 12, 15, 16, 21], "set_titl": 1, "set_xlim": 1, "set_ylim": 1, "shallow": [7, 10, 13], "share": 21, "sharp": [7, 10, 13, 21], "should": [1, 5, 7, 9, 10, 11, 12, 13, 15, 21], "show": 1, "shown": [1, 21], "shuffl": [7, 10, 13], "side": 5, "signal": [12, 21], "signatur": [1, 5], "signific": [7, 10, 13], "significantli": 21, "sim_nod": [7, 10, 13], "similar": [7, 10, 11, 13], "simpl": [1, 12, 14], "simplenetwork": 1, "simplenetworkgrammar": [1, 5, 11, 13, 21], "simplenetworktre": 19, "simul": [1, 7, 10, 13], "simulated_nod": 1, "sinc": [5, 7, 10, 13, 21], "singl": [2, 5, 7, 10, 11, 12, 13], "size": [1, 12], "sleep": 1, "so": [1, 7, 10, 13, 15, 21], "solut": [1, 7, 10, 13, 21], "solv": 1, "some": [5, 11, 21], "somewher": 21, "sorri": 1, "sort": [1, 5, 17], "space": [1, 2, 5, 7, 9, 10, 11, 13], "speci": [5, 11], "specif": [1, 2, 7, 9, 10, 13], "specifi": [1, 5, 6, 7, 10, 13, 15, 21], "speed": 12, "spent": 21, "split": [1, 5], "sqrt": 8, "stackoverflow": 14, "stage": 9, "standard": 1, "start": [5, 7, 10, 11, 12, 13, 21], "startswith": 5, "state": [1, 5, 7, 9, 10, 11, 12, 13, 21], "static": [11, 12], "statist": [7, 10, 13], "stem": 1, "step": [1, 7, 10, 13, 21], "stepwis": 1, "stochast": [1, 7, 10, 13], "stop": [1, 7, 10, 13], "store": [1, 21], "str": [1, 5, 7, 8, 10, 11, 12, 13, 17, 18, 19, 21], "strftime": [1, 21], "strict": 1, "string": [1, 5, 7, 9, 10, 11, 12, 13], "struck": 1, "structur": 7, "studi": 5, "sub": [9, 11, 12], "subclass": [5, 7, 9, 10, 13, 21], "subgraph": [7, 10, 13], "submit": 1, "subsequ": 15, "subset": [1, 11, 12], "substr": 1, "subsum": 17, "succ_kwarg": [7, 10, 13], "succ_sampl": [7, 10, 13], "success": [1, 7, 10, 13], "successfulli": 1, "sudo": 21, "suffix": 21, "suit": 12, "super": [1, 5], "suppli": [1, 2, 21], "support": [1, 21], "suptitl": 1, "sure": [11, 12, 21], "swap": 11, "switch": 1, "symmetri": [9, 11], "syntax": 21, "syst": [7, 10, 13], "system": [1, 11], "t": [1, 5, 21], "tab": 18, "tab10": 19, "tabl": [7, 10, 13], "take": [1, 5, 7, 9, 10, 11, 13, 21], "taken": [5, 9, 11, 12], "target": [1, 8, 11], "tell": 21, "ten": 1, "term": [7, 8, 10, 13], "termin": [1, 5, 7, 9, 10, 11, 12, 13, 17, 21], "terminal_st": [1, 5, 7, 10, 13], "test": [1, 7, 10, 13, 21], "test_pattern_signific": [7, 10, 13], "text_kwarg": 19, "tf": [1, 11], "than": [7, 10, 13, 21], "thei": [1, 2, 5, 7, 10, 13, 17, 21], "them": [9, 21], "themselv": 11, "therefor": 11, "thereof": 15, "thi": [1, 5, 7, 9, 10, 11, 12, 13, 15, 21], "third": 11, "those": [7, 10, 13, 21], "thousand": 21, "thread": [7, 10, 13, 14, 15, 21], "three": [1, 5, 7, 10, 11, 12, 13], "through": [7, 10, 13], "time": [1, 5, 7, 10, 13, 15, 21], "timeout": 15, "titl": 1, "to_complexity_graph": [7, 10, 13], "to_dict": [7, 9, 10, 11, 12, 13], "to_fil": [1, 7, 10, 13, 21], "to_str": [7, 10, 13], "todai": [1, 21], "togeth": 5, "too": 6, "top": 1, "top_10_stat": 1, "topolog": [7, 10, 13], "topologi": [2, 5, 7, 9, 10, 11, 12, 13], "total": [7, 10, 11, 13, 14, 21], "tqdm": [0, 1, 7, 10, 13], "track": 14, "transcript": [1, 11, 12], "transfer": [9, 11, 12], "travers": [7, 10, 13], "treat": 1, "tree": [2, 5, 7, 8, 10, 13, 17, 18, 21], "tree_shap": [7, 10, 13], "triplet": 11, "true": [1, 5, 7, 10, 12, 13, 15, 18, 19, 21], "try": 21, "tupl": [7, 10, 11, 12, 13, 17, 18], "turn": 21, "tutori": [2, 21], "two": [1, 5, 9, 11, 12, 21], "type": [1, 5, 7, 8, 9, 10, 11, 12, 13, 21], "typic": [7, 9, 10, 13], "u": 5, "ucb": [7, 8, 10, 13], "underscor": [1, 5, 11, 12], "undo": [9, 11, 12], "undo_act": [9, 11, 12], "undon": [9, 11, 12], "unexpand": [7, 10, 13], "uniqu": [1, 5, 9, 11, 12, 21], "unlik": 21, "unsuccess": 7, "until": [7, 10, 13, 15], "unus": 5, "up": [1, 7, 10, 12, 13, 21], "updat": [5, 7, 10, 13], "upgrad": [0, 1], "upon": 11, "uppercas": [5, 11, 12], "url": 21, "us": [0, 1, 6, 7, 9, 10, 11, 12, 13, 14, 15, 21], "usag": [0, 7, 10, 13], "user": [1, 7, 10, 13, 14], "usual": 21, "util": [2, 7, 10, 13, 21], "v": [1, 5], "valid": [11, 12], "valu": [1, 7, 10, 13, 21], "valueerror": [7, 10, 11, 12, 13], "variabl": 21, "variou": [7, 10, 13], "veri": 21, "version": [1, 5, 7], "video": 1, "view": 1, "virtual": [7, 10, 13, 21], "visit": [1, 7, 8, 10, 13, 17], "visual": [7, 10, 13, 17], "visualis": 2, "viz": 1, "vlim": [1, 18], "vscale": 18, "wa": 1, "wait": [15, 21], "walk": [7, 10, 13], "want": [2, 5, 6], "warn": [7, 9, 10, 13, 21], "watch": 1, "watermark": [1, 5], "we": [1, 5, 6, 21], "well": [1, 12, 21], "were": [1, 5], "what": [5, 21], "when": [5, 7, 9, 10, 12, 13, 15, 17, 21], "where": [1, 5, 9, 11, 12, 17, 21], "wherea": [7, 10, 13], "whether": [1, 5, 7, 9, 10, 11, 12, 13], "which": [0, 1, 5, 7, 8, 9, 10, 11, 13, 14, 17, 21], "while": [11, 21], "whole": 1, "whose": [7, 10, 13], "width": [1, 19], "within": [1, 7, 10, 13], "without": 5, "word": [5, 12], "work": 5, "worker": [7, 10, 13], "worker1": 21, "would": [11, 12], "write": [7, 10, 13, 21], "write_gml": [7, 10, 13], "writer": 1, "written": 5, "x": 17, "xx": 21, "xy": 17, "y": [1, 17, 21], "yet": 5, "yield": [7, 10, 13], "ylabel": 1, "you": [1, 5, 9, 21], "your": [1, 5, 21], "yourself": 21}, "titles": ["Installation", "Getting started tutorial", "CircuiTree: Biochemical circuit design using RL", "API Reference", "Built-in Grammars", "Defining custom Grammars using <code class=\"docutils literal notranslate\"><span class=\"pre\">CircuitGrammar</span></code>", "Defining search spaces", "circuitree.circuitree.CircuiTree", "circuitree.circuitree.ucb_score", "circuitree.grammar.CircuitGrammar", "circuitree.models.DimerNetworkTree", "circuitree.models.DimersGrammar", "circuitree.models.SimpleNetworkGrammar", "circuitree.models.SimpleNetworkTree", "circuitree.utils.AtomicCounter", "circuitree.utils.ManagedEvent", "circuitree.utils.merge_overlapping_sets", "circuitree.viz.complexity_layout", "circuitree.viz.plot_complexity", "circuitree.viz.plot_network", "circuitree.viz.rgb2hex", "Parallel MCTS"], "titleterms": {"1": [1, 21], "2": [1, 21], "3": [1, 21], "4": 21, "5": 21, "The": 1, "anim": 1, "api": 3, "app": 21, "atomiccount": 14, "best": 1, "biochem": 2, "built": [3, 4], "call": 21, "celeri": 21, "choos": 1, "circuit": 2, "circuitgrammar": [3, 5, 9], "circuitre": [1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "class": [1, 3], "cloud": 21, "complexity_layout": 17, "creat": 1, "custom": 5, "databas": 21, "defin": [1, 5, 6], "depend": 0, "design": 2, "dimernetworktre": 10, "dimersgrammar": 11, "distribut": 21, "function": [1, 3, 21], "get": [1, 2], "grammar": [1, 3, 4, 5, 9], "graph": 1, "guid": 2, "individu": 1, "instal": [0, 21], "launch": 21, "level": 3, "low": 3, "machin": 21, "make": 21, "managedev": 15, "mct": 21, "merge_overlapping_set": 16, "model": [10, 11, 12, 13], "node": 21, "overal": 1, "parallel": 21, "plot_complex": 18, "plot_network": 19, "problem": 1, "refer": 3, "result": 1, "reward": [1, 21], "rgb2hex": 20, "rl": 2, "run": [1, 21], "sampl": 1, "search": [1, 6, 21], "simplenetworkgrammar": 12, "simplenetworktre": 13, "singl": 21, "space": 6, "start": [1, 2], "statement": 1, "subclass": 1, "task": 21, "topologi": 1, "tree": 1, "tutori": 1, "ucb_scor": 8, "us": [2, 5], "user": 2, "util": [3, 14, 15, 16], "visual": 1, "visualis": 3, "viz": [17, 18, 19, 20], "worker": 21}})